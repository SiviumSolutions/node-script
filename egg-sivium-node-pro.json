{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-11-16T10:37:28+00:00",
    "name": "Sivium Node Pro",
    "author": "maxnomad123@gmail.com",
    "description": "a generic node.js egg\r\n\r\nThis will clone a git repo. it defaults to master if no branch is specified.\r\n\r\nInstalls the node_modules on install. If you set user_upload then I assume you know what you are doing.",
    "features": null,
    "docker_images": {
        "Nodejs 23": "ghcr.io\/siviumsolutions\/nodepro_23",
        "Nodejs 21": "ghcr.io\/siviumsolutions\/nodepro_21",
        "Nodejs 20": "ghcr.io\/siviumsolutions\/nodepro_20",
        "Nodejs 19": "ghcr.io\/siviumsolutions\/nodepro_19",
        "Nodejs 18": "ghcr.io\/siviumsolutions\/nodepro_18",
        "Nodejs 17": "ghcr.io\/siviumsolutions\/nodepro_17",
        "Nodejs 16": "ghcr.io\/siviumsolutions\/nodepro_16",
        "Nodejs 14": "ghcr.io\/siviumsolutions\/nodepro_14",
        "Nodejs 12": "ghcr.io\/siviumsolutions\/nodepro_12"
    },
    "file_denylist": [],
    "startup": "chmod +x start.sh && .\/start.sh {{SERVER_PORT}} {{AUTO_UPDATE}} {{BRANCH}}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \"Create your first administrator \\ud83d\\udcbb by going to the administration panel at:\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "^^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# NodeJS App Installation Script\r\n# Server Files: \/mnt\/server\r\n\r\n# Update and install required packages\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\n# Set up the server directory\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server\r\n\r\n# Mark \/mnt\/server as a safe Git directory to avoid 'dubious ownership' warnings\r\ngit config --global --add safe.directory \/mnt\/server\r\n\r\n# Ensure GIT_ADDRESS ends in .git\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=\"${GIT_ADDRESS}.git\"\r\nfi\r\n\r\n# Configure git address with credentials if provided\r\nif [ -n \"${USERNAME}\" ] && [ -n \"${ACCESS_TOKEN}\" ]; then\r\n    GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\nelse\r\n    echo \"Using anonymous API call\"\r\nfi\r\n\r\n# Check if the \/mnt\/server directory is empty\r\nif [ \"$(ls -A \/mnt\/server)\" ]; then\r\n    echo \"\/mnt\/server directory is not empty.\"\r\n\r\n    # Check if a git repository exists\r\n    if [ -d .git ] && [ -f .git\/config ]; then\r\n        echo \"Loading info from git config\"\r\n        ORIGIN=$(git config --get remote.origin.url || echo \"\")\r\n\r\n        # Debugging output for ORIGIN and GIT_ADDRESS comparison\r\n        echo \"Remote origin URL: ${ORIGIN}\"\r\n        echo \"Provided GIT_ADDRESS: ${GIT_ADDRESS}\"\r\n\r\n        # Add or update remote origin if it doesn't match GIT_ADDRESS\r\n        if [ -z \"${ORIGIN}\" ]; then\r\n            echo \"No remote origin found. Adding remote origin.\"\r\n            git remote add origin \"${GIT_ADDRESS}\"\r\n        elif [ \"${ORIGIN}\" != \"${GIT_ADDRESS}\" ]; then\r\n            echo \"Remote origin does not match GIT_ADDRESS. Updating remote origin to ${GIT_ADDRESS}.\"\r\n            git remote set-url origin \"${GIT_ADDRESS}\"\r\n        fi\r\n\r\n        echo \"Fetching all branches from remote\"\r\n        git fetch --all\r\n\r\n        # Switch to the specified branch if provided, default to develop if not\r\n        TARGET_BRANCH=\"${BRANCH:-develop}\"\r\n        echo \"Switching to branch ${TARGET_BRANCH}\"\r\n        git checkout -B \"${TARGET_BRANCH}\" --track \"origin\/${TARGET_BRANCH}\" || git checkout \"${TARGET_BRANCH}\"\r\n        git pull\r\n    else\r\n        echo \"Directory has files but no git config. Exiting to avoid breaking anything.\"\r\n        exit 10\r\n    fi\r\nelse\r\n    # Clone the repository if directory is empty, fetching all branches\r\n    echo \"\/mnt\/server is empty. Cloning all branches.\"\r\n    git clone \"${GIT_ADDRESS}\" .\r\n    git checkout ${BRANCH:-develop}  # Default to 'develop' if BRANCH is not specified\r\nfi\r\n\r\n# Download additional scripts\r\necho \"Downloading additional scripts...\"\r\ncurl -o sentry.sh https:\/\/raw.githubusercontent.com\/SiviumSolutions\/node-script\/main\/sentry.sh\r\ncurl -o start.sh https:\/\/raw.githubusercontent.com\/SiviumSolutions\/node-script\/main\/start.sh\r\ncurl -o check.sh https:\/\/raw.githubusercontent.com\/SiviumSolutions\/node-script\/main\/check.sh\r\n\r\n# Make the scripts executable\r\nchmod +x sentry.sh start.sh check.sh\r\n\r\necho -e \"\\nInstall and version verification complete\"\r\nexit 0",
            "container": "node:18-bullseye-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Git Repo Address",
            "description": "GitHub Repo to clone\r\n\r\nI.E. https:\/\/github.com\/parkervcp\/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Install Branch",
            "description": "The branch to install.",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Auto Update",
            "description": "Pull the latest files on startup when using a GitHub repo.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        }
    ]
}